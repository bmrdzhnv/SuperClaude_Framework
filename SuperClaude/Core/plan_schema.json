{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SuperClaude Plan Schema",
  "description": "Schema for validating executable SuperClaude plans",
  "type": "object",
  "required": ["plan_id", "goal", "steps"],
  "properties": {
    "plan_id": {
      "type": "string",
      "description": "Unique identifier for the plan",
      "pattern": "^[a-zA-Z0-9_-]+$"
    },
    "goal": {
      "type": "string",
      "description": "High-level goal statement",
      "minLength": 5,
      "maxLength": 200
    },
    "complexity": {
      "type": "number",
      "description": "Complexity score from 0.0 to 1.0",
      "minimum": 0.0,
      "maximum": 1.0
    },
    "metadata": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_by": {
          "type": "string"
        },
        "estimated_time": {
          "type": "integer",
          "description": "Estimated execution time in seconds",
          "minimum": 0
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "steps": {
      "type": "array",
      "description": "Sequential execution steps",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": ["command"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Step identifier",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "description": "Human-readable step description"
          },
          "command": {
            "type": "string",
            "description": "SuperClaude command to execute",
            "pattern": "^(/sc:|/|!)"
          },
          "args": {
            "type": "string",
            "description": "Arguments for the command"
          },
          "agents": {
            "type": "array",
            "description": "Required agents for this step",
            "items": {
              "type": "string",
              "pattern": "^[a-z-]+$"
            }
          },
          "mcp_servers": {
            "type": "array",
            "description": "Required MCP servers",
            "items": {
              "type": "string"
            }
          },
          "flags": {
            "type": "array",
            "description": "Execution flags",
            "items": {
              "type": "string",
              "pattern": "^--[a-z-]+$"
            }
          },
          "depends_on": {
            "type": "array",
            "description": "Step IDs this step depends on",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "validation": {
            "type": "string",
            "description": "Validation criteria for step completion"
          },
          "timeout": {
            "type": "integer",
            "description": "Maximum execution time in seconds",
            "minimum": 1,
            "maximum": 3600
          },
          "retry": {
            "type": "object",
            "properties": {
              "max_attempts": {
                "type": "integer",
                "minimum": 1,
                "maximum": 5
              },
              "delay": {
                "type": "integer",
                "description": "Delay between retries in seconds",
                "minimum": 1
              }
            }
          },
          "condition": {
            "type": "object",
            "description": "Conditional execution",
            "properties": {
              "if": {
                "type": "string",
                "description": "Condition to evaluate"
              },
              "then": {
                "type": "string",
                "description": "Command if condition is true"
              },
              "else": {
                "type": "string",
                "description": "Command if condition is false"
              }
            }
          }
        }
      }
    },
    "parallel_groups": {
      "type": "array",
      "description": "Groups of steps that can run in parallel",
      "items": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    },
    "rollback": {
      "type": "array",
      "description": "Rollback procedures on failure",
      "items": {
        "type": "string"
      }
    },
    "success_criteria": {
      "type": "object",
      "description": "Criteria for plan success",
      "properties": {
        "required_steps": {
          "type": "array",
          "description": "Step IDs that must succeed",
          "items": {
            "type": "integer"
          }
        },
        "min_success_rate": {
          "type": "number",
          "description": "Minimum percentage of successful steps",
          "minimum": 0,
          "maximum": 100
        },
        "validation_command": {
          "type": "string",
          "description": "Command to validate overall success"
        }
      }
    },
    "variables": {
      "type": "object",
      "description": "Plan-level variables",
      "additionalProperties": {
        "type": "string"
      }
    },
    "templates": {
      "type": "array",
      "description": "Reusable command templates",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "default_args": {
            "type": "string"
          }
        }
      }
    }
  },
  "examples": [
    {
      "plan_id": "auth_system_2024",
      "goal": "Implement secure React authentication system",
      "complexity": 0.7,
      "metadata": {
        "created_at": "2024-01-20T10:00:00Z",
        "estimated_time": 1800,
        "tags": ["auth", "react", "security"]
      },
      "steps": [
        {
          "id": 1,
          "description": "Research current auth patterns",
          "command": "/sc:research",
          "args": "React authentication NextAuth JWT OAuth",
          "agents": ["security-engineer"],
          "validation": "documentation_stored"
        },
        {
          "id": 2,
          "description": "Design authentication architecture",
          "command": "/sc:design",
          "args": "auth-middleware --security-focused",
          "agents": ["backend-architect", "security-engineer"],
          "depends_on": [1],
          "validation": "design_approved"
        },
        {
          "id": 3,
          "description": "Implement authentication components",
          "command": "/sc:implement",
          "args": "auth-system",
          "agents": ["frontend-architect", "backend-architect"],
          "depends_on": [2],
          "flags": ["--validated", "--test-driven"],
          "validation": "tests_pass"
        }
      ],
      "rollback": [
        "git reset --hard HEAD~1",
        "rm -rf src/auth",
        "npm run cleanup:auth"
      ],
      "success_criteria": {
        "required_steps": [1, 2, 3],
        "min_success_rate": 100,
        "validation_command": "npm run test:auth"
      }
    }
  ]
}